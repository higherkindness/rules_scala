def safe_name(value):
    return value.replace('.', '_').replace('-', '_')

def _entry(ctx, prefix, raw_version):

    organization, version = raw_version.split(':')
    saniorganization = safe_name(organization)
    saniversion = safe_name(version)

    name = '%s_%s' % (prefix, version.replace('.', '_'))
    binary_version = '_'.join(version.split('.')[0:2])

    compiler_bridge = ctx.attr.compiler_bridge_label_pattern[prefix].format(binary_version = binary_version)
    compiler_bridge_classpath = '[]'

    return """
#
# prefix : {prefix}
# version: {raw_version}
#
annex_configure_scala(
    name = '{name}',
    version = '{version}',
    binary_version = '{binary_version}',
    compiler_classpath = [
        '@{saniorganization}_scala_compiler_{saniversion}//jar',
        '@{saniorganization}_scala_reflect_{saniversion}//jar',
        '@{saniorganization}_scala_library_{saniversion}//jar',
    ],
    compiler_bridge = '{compiler_bridge}',
    compiler_bridge_classpath = [
        '@compiler_interface//jar',
        '@util_interface//jar',
    ],
    runtime_classpath = [
        '@{saniorganization}_scala_library_{saniversion}//jar',
    ],
    visibility = ["//visibility:public"],
)
""".format(
    prefix = prefix,
    raw_version = raw_version,
    version = version,
    binary_version = binary_version,
    name = name,
    compiler_bridge = compiler_bridge,
    saniversion = saniversion,
    saniorganization = saniorganization
)

def annex_configure_scala_repository_implementation(ctx):
    entries = []
    for prefix, raw_versions in ctx.attr.versions.items():
        for raw_version in raw_versions:
            entries.append(_entry(ctx, prefix, raw_version))

    preamble = """
#
# generated by scala annex
#

load("@scala_annex//rules:build.bzl", "annex_configure_scala")

"""

    build_contents = preamble + "\n".join(entries)
    ctx.file("BUILD", build_contents, False)

annex_configure_scala_repository = repository_rule(
    implementation = annex_configure_scala_repository_implementation,
    attrs = {
        'versions': attr.string_list_dict(),
        'compiler_bridge_label_pattern': attr.string_dict(),
    }
)

def annex_configure_scala(
        name,
        versions,
        compiler_bridge_label_pattern = {
            'scala'          : '@compiler_bridge_{binary_version}//jar',
            'typelevel_scala': '@compiler_bridge_{binary_version}//jar',
            'dotty'          : '@compiler_bridge_2_12//jar',
        }
):

    for prefix, raw_versions in versions.items():
        for raw_version in raw_versions:
            organization, version = raw_version.split(':')
            saniorganization = safe_name(organization)
            saniversion = safe_name(version)

            native.maven_jar(
                name = "%s_scala_compiler_%s" % (saniorganization, saniversion),
                artifact = "%s:scala-compiler:%s" % (organization, version),
            )

            native.maven_jar(
                name = "%s_scala_library_%s" % (saniorganization, saniversion),
                artifact = "%s:scala-library:%s" % (organization, version),
            )

            native.maven_jar(
                name = "%s_scala_reflect_%s" % (saniorganization, saniversion),
                artifact = "%s:scala-reflect:%s" % (organization, version),
            )

    annex_configure_scala_repository(
        name = name,
        versions = versions,
        compiler_bridge_label_pattern = compiler_bridge_label_pattern
    )
